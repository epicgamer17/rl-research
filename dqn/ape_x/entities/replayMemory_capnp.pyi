"""This is an automatically generated stub for `replayMemory.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator

class TransitionBatch:
    ids: bytes
    observations: bytes
    nextObservations: bytes
    actions: bytes
    rewards: bytes
    dones: bytes
    priorities: bytes
    indices: bytes
    weights: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[TransitionBatchReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> TransitionBatchReader: ...
    @staticmethod
    def new_message() -> TransitionBatchBuilder: ...
    def to_dict(self) -> dict: ...

class TransitionBatchReader(TransitionBatch):
    def as_builder(self) -> TransitionBatchBuilder: ...

class TransitionBatchBuilder(TransitionBatch):
    @staticmethod
    def from_dict(dictionary: dict) -> TransitionBatchBuilder: ...
    def copy(self) -> TransitionBatchBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TransitionBatchReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PriorityUpdate:
    ids: bytes
    indices: bytes
    losses: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PriorityUpdateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PriorityUpdateReader: ...
    @staticmethod
    def new_message() -> PriorityUpdateBuilder: ...
    def to_dict(self) -> dict: ...

class PriorityUpdateReader(PriorityUpdate):
    def as_builder(self) -> PriorityUpdateBuilder: ...

class PriorityUpdateBuilder(PriorityUpdate):
    @staticmethod
    def from_dict(dictionary: dict) -> PriorityUpdateBuilder: ...
    def copy(self) -> PriorityUpdateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PriorityUpdateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
